--[[

************************************************************************

ARLDatamine.lua

In-game datamining functions for ARL

File date: @file-date-iso@
File revision: @file-revision@
Project revision: @project-revision@
Project version: @project-version@

************************************************************************

Please see http://www.wowace.com/projects/arl/for more information.

License:
	Please see LICENSE.txt

This source code is released under All Rights Reserved.

************************************************************************

]]--


-------------------------------------------------------------------------------
-- AddOn namespace.
-------------------------------------------------------------------------------
local MODNAME			= "Ackis Recipe List"
local addon			= LibStub("AceAddon-3.0"):GetAddon(MODNAME)

local L				= LibStub("AceLocale-3.0"):GetLocale(MODNAME)


-------------------------------------------------------------------------------
-- Upvalues globals.
-------------------------------------------------------------------------------
local table, string = table, string

local tconcat, tinsert, tsort, twipe = table.concat, table.insert, table.sort, table.wipe
local strlower, strmatch = string.lower, string.match
local gsub = string.gsub
local tonumber = tonumber
local ipairs, pairs = ipairs, pairs

-------------------------------------------------------------------------------
-- Upvalued Blizzard API.
-------------------------------------------------------------------------------
local UnitName = UnitName
local UnitGUID = UnitGUID
local UnitExists = UnitExists
local UnitIsPlayer = UnitIsPlayer
local UnitIsEnemy = UnitIsEnemy
local GetNumTrainerServices = GetNumTrainerServices
local GetTrainerServiceInfo = GetTrainerServiceInfo
local IsTradeskillTrainer = IsTradeskillTrainer
local SetTrainerServiceTypeFilter = SetTrainerServiceTypeFilter
local GetTrainerServiceTypeFilter = GetTrainerServiceTypeFilter
local GetTrainerServiceSkillReq = GetTrainerServiceSkillReq
local GetMerchantNumItems = GetMerchantNumItems
local GetMerchantItemLink = GetMerchantItemLink
local GetMerchantItemInfo = GetMerchantItemInfo
local GetSpellInfo = GetSpellInfo

-- Table borrowed from Thaoky's Altoholic
-- Used with explicit permission.
local spellitem = {
	[392] = 42593,
	[728] = 2543,
	[1655] = 42615,
	[2406] = 2158,
	[2407] = 2163,
	[2408] = 2164,
	[2409] = 2169,
	[2553] = 3230,
	[2555] = 2335,
	[2598] = 2389,
	[2601] = 2403,
	[2697] = 2542,
	[2698] = 2545,
	[2699] = 2547,
	[2700] = 2548,
	[2701] = 2549,
	[2881] = 2667,
	[2882] = 3330,
	[2883] = 3295,
	[2889] = 2795,
	[3393] = 3172,
	[3394] = 3174,
	[3395] = 3175,
	[3396] = 2333,
	[3608] = 3297,
	[3609] = 3321,
	[3610] = 3325,
	[3611] = 3334,
	[3612] = 3336,
	[3678] = 3370,
	[3679] = 3371,
	[3680] = 3372,
	[3681] = 3373,
	[3682] = 3376,
	[3683] = 3377,
	[3734] = 3397,
	[3735] = 3398,
	[3736] = 3399,
	[3737] = 3400,
	[3830] = 3450,
	[3831] = 3451,
	[3832] = 3453,
	[3866] = 3493,
	[3867] = 3495,
	[3868] = 3497,
	[3869] = 3500,
	[3870] = 3504,
	[3871] = 3505,
	[3872] = 3507,
	[3873] = 3511,
	[3874] = 3513,
	[3875] = 3515,
	[4292] = 3758,
	[4293] = 3762,
	[4294] = 3767,
	[4296] = 3769,
	[4297] = 3771,
	[4298] = 3775,
	[4299] = 3773,
	[4300] = 3777,
	[4301] = 3779,
	[4345] = 3847,
	[4346] = 3844,
	[4347] = 3849,
	[4348] = 3868,
	[4349] = 3851,
	[4350] = 3856,
	[4351] = 3858,
	[4352] = 3860,
	[4353] = 3863,
	[4354] = 3872,
	[4355] = 3862,
	[4356] = 3864,
	[4408] = 3928,
	[4409] = 3933,
	[4410] = 3940,
	[4411] = 3944,
	[4412] = 3954,
	[4413] = 3959,
	[4414] = 3960,
	[4415] = 3966,
	[4416] = 3968,
	[4417] = 3972,
	[4597] = 4508,
	[4609] = 4094,
	[4624] = 4942,
	[5083] = 5244,
	[5482] = 6412,
	[5483] = 6413,
	[5484] = 6414,
	[5485] = 6415,
	[5486] = 6416,
	[5487] = 6417,
	[5488] = 6418,
	[5489] = 6419,
	[5528] = 6501,
	[5543] = 6518,
	[5578] = 2673,
	[5640] = 6617,
	[5642] = 6624,
	[5643] = 6618,
	[5771] = 6686,
	[5772] = 6688,
	[5773] = 6692,
	[5774] = 6693,
	[5775] = 6695,
	[5786] = 6702,
	[5787] = 6703,
	[5788] = 6704,
	[5789] = 6705,
	[5972] = 7133,
	[5973] = 7149,
	[5974] = 7153,
	[6039] = 7213,
	[6044] = 7221,
	[6045] = 7222,
	[6046] = 7224,
	[6047] = 3503,
	[6053] = 7255,
	[6054] = 7256,
	[6055] = 7257,
	[6056] = 7258,
	[6057] = 7259,
	[6068] = 3449,
	[6211] = 3188,
	[6270] = 7630,
	[6271] = 7629,
	[6272] = 7633,
	[6274] = 7639,
	[6275] = 7643,
	[6325] = 7751,
	[6326] = 7752,
	[6328] = 7753,
	[6329] = 7754,
	[6330] = 7755,
	[6342] = 7443,
	[6344] = 7766,
	[6346] = 7776,
	[6347] = 7782,
	[6348] = 7786,
	[6349] = 7793,
	[6368] = 7827,
	[6369] = 7828,
	[6375] = 7859,
	[6377] = 7867,
	[6390] = 7892,
	[6391] = 7893,
	[6401] = 3870,
	[6454] = 7935,
	[6474] = 7953,
	[6475] = 7954,
	[6476] = 7955,
	[6661] = 8238,
	[6663] = 8240,
	[6672] = 8243,
	[6710] = 8322,
	[6716] = 8339,
	[6735] = 8367,
	[6892] = 8607,
	[7084] = 8793,
	[7085] = 8795,
	[7086] = 8797,
	[7087] = 8789,
	[7088] = 8802,
	[7089] = 8786,
	[7090] = 8784,
	[7091] = 8782,
	[7092] = 8780,
	[7114] = 3854,
	[7288] = 9064,
	[7289] = 9070,
	[7290] = 9072,
	[7360] = 3765,
	[7361] = 9146,
	[7362] = 9147,
	[7363] = 9148,
	[7364] = 9149,
	[7449] = 9195,
	[7450] = 9197,
	[7451] = 9202,
	[7452] = 9207,
	[7453] = 9208,
	[7560] = 9269,
	[7561] = 9273,
	[7613] = 3772,
	[7742] = 3971,
	[7975] = 9933,
	[7976] = 9939,
	[7978] = 9811,
	[7979] = 9813,
	[7980] = 9814,
	[7981] = 9818,
	[7982] = 9820,
	[7983] = 9945,
	[7984] = 9950,
	[7985] = 9952,
	[7989] = 9964,
	[7990] = 9970,
	[7991] = 9966,
	[7992] = 9995,
	[7993] = 10005,
	[7995] = 9937,
	[8028] = 10009,
	[8029] = 9997,
	[8030] = 10013,
	[8384] = 10490,
	[8385] = 10509,
	[8386] = 10520,
	[8387] = 10531,
	[8389] = 10560,
	[8390] = 10562,
	[8395] = 10525,
	[8397] = 10533,
	[8398] = 10542,
	[8399] = 10554,
	[8400] = 10564,
	[8401] = 10568,
	[8402] = 10570,
	[8403] = 10529,
	[8404] = 10544,
	[8405] = 10546,
	[8406] = 10566,
	[8407] = 10572,
	[8408] = 10574,
	[8409] = 10516,
	[9293] = 11453,
	[9294] = 11458,
	[9295] = 11464,
	[9296] = 11466,
	[9297] = 11468,
	[9298] = 11472,
	[9300] = 11477,
	[9301] = 11476,
	[9302] = 11473,
	[9303] = 11459,
	[9304] = 11479,
	[9305] = 11480,
	[9367] = 11643,
	[10300] = 12056,
	[10301] = 12059,
	[10302] = 12060,
	[10311] = 12064,
	[10312] = 12066,
	[10314] = 12075,
	[10315] = 12078,
	[10316] = 12047,
	[10317] = 12080,
	[10318] = 12081,
	[10320] = 12084,
	[10321] = 12085,
	[10323] = 12089,
	[10325] = 12091,
	[10326] = 12093,
	[10424] = 12259,
	[10463] = 12086,
	[10601] = 12587,
	[10602] = 12597,
	[10603] = 12607,
	[10604] = 12614,
	[10605] = 12615,
	[10606] = 12616,
	[10607] = 12617,
	[10608] = 12620,
	[10609] = 12624,
	[10644] = 11456,
	[10713] = 11454,
	[10728] = 3873,
	[10858] = 3494,
	[11038] = 13380,
	[11039] = 13419,
	[11081] = 13464,
	[11098] = 13522,
	[11101] = 13536,
	[11150] = 13612,
	[11151] = 13617,
	[11152] = 13620,
	[11163] = 13646,
	[11164] = 13653,
	[11165] = 13655,
	[11166] = 13698,
	[11167] = 13687,
	[11168] = 13689,
	[11202] = 13817,
	[11203] = 13841,
	[11204] = 13846,
	[11205] = 13868,
	[11206] = 13882,
	[11207] = 13898,
	[11208] = 13915,
	[11223] = 13931,
	[11224] = 13933,
	[11225] = 13945,
	[11226] = 13947,
	[11610] = 15292,
	[11611] = 15294,
	[11612] = 15296,
	[11614] = 15293,
	[11615] = 15295,
	[11813] = 15596,
	[11813] = 15596,
	[11827] = 15633,
	[11828] = 15628,
	[12162] = 3492,
	[12163] = 3496,
	[12164] = 3498,
	[12226] = 15935,
	[12227] = 15853,
	[12228] = 15855,
	[12229] = 15856,
	[12231] = 15861,
	[12232] = 15863,
	[12233] = 15865,
	[12239] = 15906,
	[12240] = 15910,
	[12261] = 15973,
	[12682] = 16642,
	[12683] = 16643,
	[12684] = 16644,
	[12685] = 16645,
	[12687] = 16646,
	[12688] = 16647,
	[12689] = 16648,
	[12690] = 16649,
	[12691] = 16650,
	[12692] = 16651,
	[12693] = 16652,
	[12694] = 16653,
	[12695] = 16654,
	[12696] = 16667,
	[12697] = 16656,
	[12699] = 16655,
	[12700] = 16657,
	[12701] = 16658,
	[12702] = 16659,
	[12703] = 16661,
	[12704] = 16662,
	[12705] = 16663,
	[12706] = 16664,
	[12707] = 16665,
	[12711] = 16724,
	[12713] = 16725,
	[12714] = 16726,
	[12715] = 16730,
	[12716] = 16728,
	[12717] = 16729,
	[12718] = 16731,
	[12719] = 16732,
	[12720] = 16741,
	[12725] = 16742,
	[12726] = 16744,
	[12727] = 16745,
	[12728] = 16746,
	[12819] = 16969,
	[12821] = 16970,
	[12823] = 16971,
	[12824] = 16973,
	[12825] = 16978,
	[12827] = 16983,
	[12828] = 16984,
	[12830] = 16985,
	[12833] = 16988,
	[12834] = 16990,
	[12835] = 16991,
	[12836] = 16992,
	[12837] = 16993,
	[12838] = 16994,
	[12839] = 16995,
	[12958] = 17187,
	[13287] = 4096,
	[13288] = 4097,
	[13308] = 3957,
	[13309] = 3939,
	[13310] = 3979,
	[13311] = 3969,
	[13476] = 17552,
	[13477] = 17553,
	[13478] = 17554,
	[13479] = 17555,
	[13480] = 17556,
	[13481] = 17557,
	[13482] = 17559,
	[13483] = 17560,
	[13484] = 17561,
	[13485] = 17562,
	[13486] = 17563,
	[13487] = 17564,
	[13488] = 17565,
	[13489] = 17566,
	[13490] = 17570,
	[13491] = 17571,
	[13492] = 17572,
	[13493] = 17573,
	[13494] = 17574,
	[13495] = 17575,
	[13496] = 17576,
	[13497] = 17577,
	[13499] = 17578,
	[13501] = 17580,
	[13517] = 17632,
	[13518] = 17634,
	[13519] = 17635,
	[13520] = 17636,
	[13521] = 17637,
	[13522] = 17638,
	[13939] = 18238,
	[13940] = 18239,
	[13941] = 18241,
	[13942] = 18240,
	[13943] = 18242,
	[13945] = 18243,
	[13946] = 18244,
	[13947] = 18245,
	[13948] = 18246,
	[13949] = 18247,
	[14466] = 18403,
	[14467] = 18404,
	[14468] = 18405,
	[14469] = 18406,
	[14470] = 18407,
	[14471] = 18408,
	[14472] = 18409,
	[14473] = 18410,
	[14474] = 18411,
	[14476] = 18412,
	[14477] = 18413,
	[14478] = 18414,
	[14479] = 18415,
	[14480] = 18416,
	[14481] = 18417,
	[14482] = 18418,
	[14483] = 18419,
	[14484] = 18420,
	[14485] = 18421,
	[14486] = 18422,
	[14488] = 18423,
	[14489] = 18424,
	[14490] = 18434,
	[14491] = 18438,
	[14492] = 18437,
	[14493] = 18436,
	[14494] = 18439,
	[14495] = 18441,
	[14496] = 18442,
	[14497] = 18440,
	[14498] = 18444,
	[14499] = 18445,
	[14500] = 18446,
	[14501] = 18447,
	[14504] = 18449,
	[14505] = 18450,
	[14506] = 18451,
	[14507] = 18448,
	[14508] = 18453,
	[14509] = 18452,
	[14510] = 18455,
	[14511] = 18454,
	[14512] = 18456,
	[14513] = 18457,
	[14514] = 18458,
	[14526] = 18560,
	[14627] = 3869,
	[14630] = 3857,
	[14634] = 3454,
	[14635] = 3778,
	[14639] = 3952,
	[15724] = 19048,
	[15725] = 19049,
	[15726] = 19050,
	[15727] = 19051,
	[15728] = 19052,
	[15729] = 19053,
	[15730] = 19054,
	[15731] = 19055,
	[15732] = 19059,
	[15733] = 19060,
	[15734] = 19061,
	[15735] = 19062,
	[15737] = 19063,
	[15738] = 19064,
	[15739] = 19065,
	[15740] = 19066,
	[15741] = 19067,
	[15742] = 19068,
	[15743] = 19070,
	[15744] = 19071,
	[15745] = 19072,
	[15746] = 19073,
	[15747] = 19074,
	[15748] = 19075,
	[15749] = 19076,
	[15751] = 19077,
	[15752] = 19078,
	[15753] = 19079,
	[15755] = 19081,
	[15756] = 19082,
	[15757] = 19083,
	[15758] = 19084,
	[15759] = 19085,
	[15760] = 19086,
	[15761] = 19087,
	[15762] = 19088,
	[15763] = 19089,
	[15764] = 19090,
	[15765] = 19091,
	[15768] = 19092,
	[15770] = 19094,
	[15771] = 19095,
	[15772] = 19097,
	[15773] = 19098,
	[15774] = 19100,
	[15775] = 19101,
	[15776] = 19102,
	[15777] = 19103,
	[15779] = 19104,
	[15781] = 19107,
	[16041] = 19790,
	[16042] = 19791,
	[16043] = 19792,
	[16044] = 19793,
	[16045] = 19794,
	[16046] = 19814,
	[16047] = 19795,
	[16048] = 19796,
	[16049] = 19799,
	[16050] = 19815,
	[16051] = 19800,
	[16052] = 19819,
	[16053] = 19825,
	[16054] = 19830,
	[16055] = 19831,
	[16056] = 19833,
	[16110] = 15933,
	[16111] = 15915,
	[16112] = 7929,
	[16113] = 10840,
	[16214] = 20008,
	[16215] = 20020,
	[16216] = 20014,
	[16217] = 20017,
	[16218] = 20009,
	[16219] = 20012,
	[16220] = 20024,
	[16221] = 20026,
	[16222] = 20016,
	[16223] = 20029,
	[16224] = 20015,
	[16242] = 20028,
	[16243] = 20051,
	[16243] = 20051,
	[16244] = 20013,
	[16245] = 20023,
	[16246] = 20010,
	[16247] = 20030,
	[16248] = 20033,
	[16249] = 20036,
	[16250] = 20031,
	[16251] = 20011,
	[16252] = 20034,
	[16253] = 20025,
	[16254] = 20032,
	[16255] = 20035,
	[16767] = 20626,
	[17017] = 20848,
	[17018] = 20849,
	[17022] = 20853,
	[17023] = 20854,
	[17025] = 20855,
	[17049] = 20872,
	[17051] = 20874,
	[17052] = 20876,
	[17053] = 20873,
	[17059] = 20890,
	[17060] = 20897,
	[17062] = 20916,
	[17200] = 21143,
	[17201] = 21144,
	[17706] = 21913,
	[17709] = 21923,
	[17720] = 21940,
	[17722] = 21943,
	[17724] = 21945,
	[17725] = 21931,
	[18046] = 22480,
	[18160] = 9513,
	[18239] = 22711,
	[18252] = 22727,
	[18257] = 22732,
	[18259] = 22749,
	[18260] = 22750,
	[18264] = 22757,
	[18265] = 22759,
	[18267] = 22761,
	[18290] = 22793,
	[18291] = 22797,
	[18292] = 22795,
	[18414] = 22866,
	[18415] = 22867,
	[18416] = 22868,
	[18417] = 22869,
	[18418] = 22870,
	[18487] = 22902,
	[18514] = 22921,
	[18515] = 22922,
	[18516] = 22923,
	[18517] = 22926,
	[18518] = 22927,
	[18519] = 22928,
	[18592] = 21161,
	[18647] = 23066,
	[18648] = 23068,
	[18649] = 23067,
	[18650] = 23069,
	[18651] = 23071,
	[18652] = 23077,
	[18653] = 23078,
	[18654] = 23096,
	[18655] = 23079,
	[18656] = 23080,
	[18657] = 23081,
	[18658] = 23082,
	[18661] = 23129,
	[18731] = 23190,
	[18949] = 23399,
	[19027] = 23507,
	[19202] = 23628,
	[19203] = 23632,
	[19204] = 23629,
	[19205] = 23633,
	[19206] = 23636,
	[19207] = 23637,
	[19208] = 23638,
	[19209] = 23639,
	[19210] = 23650,
	[19211] = 23652,
	[19212] = 23653,
	[19215] = 23662,
	[19216] = 23664,
	[19217] = 23665,
	[19218] = 23663,
	[19219] = 23666,
	[19220] = 23667,
	[19326] = 23703,
	[19327] = 23704,
	[19328] = 23705,
	[19329] = 23706,
	[19330] = 23707,
	[19331] = 23708,
	[19332] = 23709,
	[19333] = 23710,
	[19442] = 23787,
	[19444] = 23799,
	[19445] = 23800,
	[19446] = 23801,
	[19447] = 23802,
	[19448] = 23803,
	[19449] = 23804,
	[19764] = 24091,
	[19765] = 24092,
	[19766] = 24093,
	[19769] = 24121,
	[19770] = 24122,
	[19771] = 24123,
	[19772] = 24124,
	[19773] = 24125,
	[19776] = 24136,
	[19777] = 24137,
	[19778] = 24138,
	[19779] = 24139,
	[19780] = 24140,
	[19781] = 24141,
	[20000] = 24356,
	[20001] = 24357,
	[20011] = 24365,
	[20012] = 24366,
	[20013] = 24367,
	[20014] = 24368,
	[20040] = 24399,
	[20075] = 24418,
	[20254] = 19080,
	[20382] = 24703,
	[20506] = 24846,
	[20507] = 24847,
	[20508] = 24848,
	[20509] = 24849,
	[20510] = 24850,
	[20511] = 24851,
	[20546] = 24901,
	[20547] = 24903,
	[20548] = 24902,
	[20553] = 24912,
	[20554] = 24914,
	[20555] = 24913,
	[20576] = 24940,
	[20727] = 25073,
	[20728] = 25074,
	[20729] = 25078,
	[20730] = 25079,
	[20732] = 25081,
	[20733] = 25082,
	[20752] = 25125,
	[20752] = 25125,
	[20753] = 25126,
	[20754] = 25127,
	[20754] = 25127,
	[20755] = 25128,
	[20755] = 25128,
	[20756] = 25129,
	[20756] = 25129,
	[20757] = 25130,
	[20757] = 25130,
	[20758] = 25124,
	[20761] = 25146,
	[20854] = 25339,
	[20855] = 25323,
	[20856] = 25320,
	[20970] = 25610,
	[20971] = 25612,
	[20973] = 25617,
	[20974] = 25618,
	[20975] = 25619,
	[20976] = 25622,
	[21025] = 25659,
	[21099] = 25704,
	[21219] = 25954,
	[21358] = 26085,
	[21371] = 26087,
	[21547] = 26277,
	[21548] = 26279,
	[21724] = 26416,
	[21725] = 26417,
	[21726] = 26418,
	[21727] = 26420,
	[21728] = 26421,
	[21729] = 26422,
	[21730] = 26423,
	[21731] = 26424,
	[21732] = 26425,
	[21733] = 26426,
	[21734] = 26427,
	[21735] = 26428,
	[21892] = 26747,
	[21893] = 26749,
	[21894] = 26750,
	[21895] = 26751,
	[21896] = 26773,
	[21897] = 26774,
	[21898] = 26775,
	[21899] = 26776,
	[21900] = 26777,
	[21901] = 26778,
	[21902] = 26779,
	[21903] = 26780,
	[21904] = 26781,
	[21905] = 26782,
	[21906] = 26783,
	[21907] = 26784,
	[21908] = 26752,
	[21909] = 26753,
	[21910] = 26754,
	[21911] = 26755,
	[21912] = 26756,
	[21913] = 26758,
	[21914] = 26757,
	[21915] = 26759,
	[21916] = 26760,
	[21917] = 26762,
	[21918] = 26761,
	[21919] = 26763,
	[21940] = 26873,
	[21941] = 26875,
	[21942] = 26878,
	[21943] = 26881,
	[21944] = 26882,
	[21945] = 26887,
	[21947] = 26896,
	[21948] = 26897,
	[21949] = 26900,
	[21952] = 26906,
	[21953] = 26909,
	[21954] = 26910,
	[21955] = 26912,
	[21956] = 26914,
	[21957] = 26915,
	[21992] = 27032,
	[21993] = 27033,
	[22209] = 27585,
	[22214] = 27588,
	[22219] = 27586,
	[22220] = 27589,
	[22221] = 27590,
	[22222] = 27587,
	[22307] = 27658,
	[22308] = 27659,
	[22309] = 27660,
	[22310] = 27724,
	[22312] = 27725,
	[22388] = 27829,
	[22389] = 27832,
	[22390] = 27830,
	[22392] = 27837,
	[22530] = 27906,
	[22531] = 27911,
	[22532] = 27913,
	[22533] = 27914,
	[22534] = 27917,
	[22535] = 27920,
	[22536] = 27924,
	[22537] = 27926,
	[22538] = 27927,
	[22539] = 27945,
	[22540] = 27946,
	[22541] = 27947,
	[22542] = 27948,
	[22543] = 27950,
	[22544] = 27951,
	[22545] = 27954,
	[22547] = 27960,
	[22548] = 27962,
	[22551] = 27968,
	[22552] = 27967,
	[22553] = 27972,
	[22554] = 27971,
	[22555] = 27975,
	[22556] = 27977,
	[22557] = 28004,
	[22558] = 28003,
	[22559] = 27984,
	[22560] = 27981,
	[22561] = 27982,
	[22562] = 28016,
	[22563] = 28019,
	[22565] = 28022,
	[22647] = 28267,
	[22683] = 28210,
	[22766] = 28461,
	[22767] = 28462,
	[22768] = 28463,
	[22769] = 28474,
	[22770] = 28473,
	[22771] = 28472,
	[22772] = 28482,
	[22773] = 28481,
	[22774] = 28480,
	[22900] = 28543,
	[22901] = 28546,
	[22902] = 28549,
	[22903] = 28550,
	[22904] = 28552,
	[22905] = 28553,
	[22906] = 28554,
	[22907] = 28555,
	[22908] = 28556,
	[22909] = 28557,
	[22910] = 28558,
	[22911] = 28562,
	[22912] = 28563,
	[22913] = 28564,
	[22914] = 28565,
	[22915] = 28566,
	[22916] = 28567,
	[22918] = 28569,
	[22919] = 28570,
	[22920] = 28571,
	[22921] = 28572,
	[22922] = 28573,
	[22923] = 28575,
	[22924] = 28576,
	[22925] = 28577,
	[22926] = 28578,
	[22927] = 28579,
	[23130] = 28903,
	[23131] = 28905,
	[23133] = 28906,
	[23134] = 28907,
	[23135] = 28910,
	[23136] = 28912,
	[23137] = 28914,
	[23138] = 28915,
	[23140] = 28916,
	[23141] = 28917,
	[23142] = 28918,
	[23143] = 28924,
	[23144] = 28925,
	[23145] = 28927,
	[23146] = 28933,
	[23147] = 28936,
	[23148] = 28938,
	[23149] = 28944,
	[23150] = 28947,
	[23151] = 28948,
	[23152] = 28950,
	[23153] = 28953,
	[23154] = 28955,
	[23155] = 28957,
	[23574] = 29688,
	[23590] = 29566,
	[23591] = 29568,
	[23592] = 29569,
	[23593] = 29571,
	[23594] = 29603,
	[23595] = 29605,
	[23596] = 29606,
	[23597] = 29608,
	[23598] = 29611,
	[23599] = 29610,
	[23600] = 29613,
	[23601] = 29614,
	[23602] = 29615,
	[23603] = 29616,
	[23604] = 29617,
	[23605] = 29619,
	[23606] = 29620,
	[23607] = 29621,
	[23608] = 29628,
	[23609] = 29629,
	[23610] = 29630,
	[23611] = 29642,
	[23612] = 29643,
	[23613] = 29645,
	[23617] = 29649,
	[23618] = 29656,
	[23620] = 29658,
	[23621] = 29622,
	[23622] = 29662,
	[23623] = 29663,
	[23624] = 29664,
	[23625] = 29668,
	[23626] = 29669,
	[23627] = 29671,
	[23628] = 29672,
	[23629] = 29692,
	[23630] = 29693,
	[23631] = 29694,
	[23632] = 29695,
	[23633] = 29696,
	[23634] = 29697,
	[23635] = 29698,
	[23636] = 29699,
	[23637] = 29700,
	[23638] = 29728,
	[23639] = 29729,
	[23799] = 30313,
	[23800] = 30314,
	[23802] = 30315,
	[23803] = 30316,
	[23804] = 30317,
	[23805] = 30318,
	[23806] = 30325,
	[23807] = 30329,
	[23808] = 30332,
	[23809] = 30334,
	[23810] = 30337,
	[23811] = 30341,
	[23814] = 30344,
	[23815] = 30347,
	[23816] = 30348,
	[23874] = 30547,
	[23883] = 30551,
	[23884] = 30552,
	[23887] = 30556,
	[23888] = 30548,
	[24000] = 27911,
	[24002] = 29657,
	[24003] = 27960,
	[24158] = 31053,
	[24159] = 31054,
	[24160] = 31055,
	[24161] = 31056,
	[24162] = 31057,
	[24163] = 31058,
	[24164] = 31060,
	[24165] = 31061,
	[24166] = 31067,
	[24167] = 31068,
	[24168] = 31070,
	[24169] = 31071,
	[24170] = 31072,
	[24171] = 31076,
	[24172] = 31077,
	[24173] = 31078,
	[24174] = 31062,
	[24175] = 31063,
	[24176] = 31064,
	[24177] = 31065,
	[24178] = 31066,
	[24179] = 31079,
	[24180] = 31080,
	[24181] = 31081,
	[24182] = 31082,
	[24183] = 31083,
	[24192] = 31089,
	[24193] = 31084,
	[24194] = 31085,
	[24195] = 31087,
	[24196] = 31088,
	[24197] = 31090,
	[24198] = 31091,
	[24199] = 31092,
	[24200] = 31149,
	[24201] = 31094,
	[24202] = 31095,
	[24203] = 31096,
	[24204] = 31097,
	[24205] = 31098,
	[24206] = 31099,
	[24207] = 31100,
	[24208] = 31101,
	[24209] = 31102,
	[24210] = 31103,
	[24211] = 31104,
	[24212] = 31105,
	[24213] = 31106,
	[24214] = 31107,
	[24215] = 31108,
	[24216] = 31109,
	[24217] = 31110,
	[24218] = 31111,
	[24219] = 31112,
	[24220] = 31113,
	[24292] = 31430,
	[24293] = 31431,
	[24294] = 31432,
	[24295] = 31433,
	[24296] = 31434,
	[24297] = 31435,
	[24298] = 31437,
	[24299] = 31438,
	[24300] = 31440,
	[24301] = 31441,
	[24302] = 31442,
	[24303] = 31443,
	[24304] = 31444,
	[24305] = 31448,
	[24306] = 31449,
	[24307] = 31450,
	[24308] = 31451,
	[24309] = 31452,
	[24310] = 31453,
	[24311] = 31454,
	[24312] = 31455,
	[24313] = 31456,
	[24314] = 31459,
	[24316] = 31373,
	[25526] = 32285,
	[25720] = 32455,
	[25721] = 32457,
	[25722] = 32458,
	[25725] = 32461,
	[25726] = 32482,
	[25728] = 32485,
	[25729] = 32487,
	[25730] = 32489,
	[25731] = 32488,
	[25732] = 32490,
	[25733] = 32493,
	[25734] = 32494,
	[25735] = 32495,
	[25736] = 32496,
	[25737] = 32497,
	[25738] = 32498,
	[25739] = 32499,
	[25740] = 32500,
	[25741] = 32501,
	[25742] = 32502,
	[25743] = 32503,
	[25846] = 32656,
	[25847] = 32657,
	[25848] = 32665,
	[25849] = 32667,
	[25869] = 32765,
	[25887] = 32814,
	[25902] = 32866,
	[25903] = 32867,
	[25904] = 32870,
	[25905] = 32868,
	[25906] = 32869,
	[25907] = 32871,
	[25908] = 32873,
	[25909] = 32872,
	[25910] = 32874,
	[27684] = 33279,
	[27685] = 33276,
	[27686] = 33277,
	[27687] = 33278,
	[27688] = 33284,
	[27689] = 33285,
	[27690] = 33286,
	[27691] = 33287,
	[27692] = 33288,
	[27693] = 33289,
	[27694] = 33290,
	[27695] = 33291,
	[27696] = 33292,
	[27697] = 33293,
	[27698] = 33294,
	[27699] = 33295,
	[27700] = 33296,
	[28270] = 33992,
	[28271] = 33994,
	[28272] = 33997,
	[28273] = 33999,
	[28274] = 34003,
	[28276] = 34005,
	[28277] = 34006,
	[28279] = 34007,
	[28280] = 34008,
	[28281] = 34010,
	[28282] = 34009,
	[28291] = 34069,
	[28596] = 34590,
	[28632] = 34608,
	[29232] = 32766,
	[29664] = 35530,
	[29669] = 35520,
	[29672] = 35521,
	[29673] = 35522,
	[29674] = 35523,
	[29675] = 35524,
	[29677] = 35525,
	[29682] = 35526,
	[29684] = 35527,
	[29689] = 35529,
	[29691] = 35528,
	[29693] = 35531,
	[29698] = 35532,
	[29700] = 35533,
	[29701] = 35534,
	[29702] = 35535,
	[29703] = 35536,
	[29704] = 35537,
	[29713] = 35538,
	[29717] = 35543,
	[29719] = 35549,
	[29720] = 35555,
	[29721] = 35557,
	[29722] = 35554,
	[29723] = 35558,
	[29724] = 35559,
	[29725] = 35560,
	[29726] = 35561,
	[29727] = 35562,
	[29728] = 35563,
	[29729] = 35564,
	[29730] = 35567,
	[29731] = 35568,
	[29732] = 35572,
	[29733] = 35573,
	[29734] = 35574,
	[30156] = 36210,
	[30280] = 36315,
	[30281] = 36316,
	[30282] = 36317,
	[30283] = 36318,
	[30301] = 36349,
	[30302] = 36351,
	[30303] = 36352,
	[30304] = 36353,
	[30305] = 36355,
	[30306] = 36357,
	[30307] = 36358,
	[30308] = 36359,
	[30321] = 36389,
	[30322] = 36390,
	[30323] = 36391,
	[30324] = 36392,
	[30443] = 28568,
	[30483] = 36686,
	[30826] = 37855,
	[30833] = 37873,
	[30842] = 37882,
	[30843] = 37883,
	[30844] = 37884,
	[31390] = 38473,
	[31391] = 38475,
	[31392] = 38476,
	[31393] = 38477,
	[31394] = 38478,
	[31395] = 38479,
	[31401] = 38503,
	[31402] = 38504,
	[31674] = 38868,
	[31675] = 38867,
	[31680] = 38960,
	[31681] = 38962,
	[31682] = 38961,
	[31870] = 39451,
	[31871] = 39455,
	[31872] = 39458,
	[31873] = 39466,
	[31874] = 39467,
	[31875] = 39452,
	[31876] = 39463,
	[31877] = 39462,
	[31878] = 39470,
	[31879] = 39471,
	[32070] = 39637,
	[32071] = 39639,
	[32274] = 39705,
	[32277] = 39706,
	[32281] = 39710,
	[32282] = 39711,
	[32283] = 39712,
	[32284] = 39713,
	[32285] = 39714,
	[32286] = 39715,
	[32287] = 39716,
	[32288] = 39717,
	[32289] = 39718,
	[32290] = 39719,
	[32291] = 39720,
	[32292] = 39721,
	[32293] = 39722,
	[32294] = 39723,
	[32295] = 39724,
	[32296] = 39725,
	[32297] = 39727,
	[32298] = 39728,
	[32299] = 39729,
	[32300] = 39730,
	[32301] = 39731,
	[32302] = 39732,
	[32303] = 39733,
	[32304] = 39734,
	[32305] = 39735,
	[32306] = 39736,
	[32307] = 39737,
	[32308] = 39738,
	[32309] = 39739,
	[32310] = 39740,
	[32311] = 39741,
	[32312] = 39742,
	[32381] = 39895,
	[32411] = 39963,
	[32412] = 39961,
	[32429] = 40005,
	[32429] = 40002,
	[32429] = 39997,
	[32430] = 52733,
	[32431] = 40001,
	[32433] = 40003,
	[32434] = 40004,
	[32436] = 40006,
	[32437] = 40020,
	[32438] = 40021,
	[32439] = 40023,
	[32440] = 40024,
	[32442] = 40033,
	[32442] = 40034,
	[32443] = 40035,
	[32444] = 40036,
	[32447] = 40060,
	[32736] = 41132,
	[32737] = 41133,
	[32738] = 41134,
	[32739] = 41135,
	[32744] = 41156,
	[32745] = 41157,
	[32746] = 41158,
	[32747] = 41160,
	[32748] = 41161,
	[32749] = 41162,
	[32750] = 41163,
	[32751] = 41164,
	[32752] = 41207,
	[32753] = 41208,
	[32754] = 41205,
	[32755] = 41206,
	[33124] = 42546,
	[33148] = 25086,
	[33149] = 25083,
	[33150] = 25084,
	[33152] = 25080,
	[33153] = 25072,
	[33155] = 42588,
	[33156] = 42589,
	[33157] = 42590,
	[33158] = 42591,
	[33159] = 42592,
	[33165] = 42620,
	[33174] = 42662,
	[33186] = 42688,
	[33205] = 42731,
	[33209] = 42736,
	[33305] = 42558,
	[33307] = 42974,
	[33783] = 43493,
	[33792] = 43549,
	[33804] = 43676,
	[33869] = 43761,
	[33870] = 43707,
	[33871] = 43758,
	[33873] = 43765,
	[33875] = 43772,
	[33925] = 43779,
	[33954] = 43846,
	[34114] = 44391,
	[34172] = 35544,
	[34174] = 35539,
	[34200] = 44359,
	[34201] = 44768,
	[34261] = 44950,
	[34262] = 44953,
	[34319] = 44958,
	[34413] = 45022,
	[34491] = 45117,
	[34689] = 44794,
	[34834] = 45695,
	[34872] = 45765,
	[34872] = 45765,
	[35186] = 46111,
	[35187] = 46107,
	[35189] = 46108,
	[35190] = 46109,
	[35191] = 46106,
	[35192] = 46110,
	[35193] = 46112,
	[35194] = 46113,
	[35195] = 46114,
	[35196] = 46115,
	[35197] = 46116,
	[35198] = 46122,
	[35199] = 46123,
	[35200] = 46124,
	[35201] = 46125,
	[35203] = 46127,
	[35204] = 46128,
	[35205] = 46126,
	[35205] = 46129,
	[35206] = 46130,
	[35207] = 46131,
	[35208] = 46140,
	[35209] = 46141,
	[35210] = 46142,
	[35211] = 46144,
	[35212] = 46132,
	[35213] = 46133,
	[35214] = 46134,
	[35215] = 46135,
	[35216] = 46136,
	[35217] = 46137,
	[35218] = 46138,
	[35219] = 46139,
	[35273] = 46353,
	[35297] = 34008,
	[35298] = 27948,
	[35299] = 34007,
	[35322] = 46403,
	[35323] = 46404,
	[35325] = 46405,
	[35498] = 46578,
	[35500] = 46594,
	[35502] = 46597,
	[35505] = 46601,
	[35550] = 46594,
	[35564] = 46684,
	[35566] = 46688,
	[35582] = 46697,
	[35696] = 46776,
	[35696] = 46775,
	[35697] = 46777,
	[35698] = 46778,
	[35699] = 46779,
	[35708] = 46803,
	[35752] = 47046,
	[35753] = 47048,
	[35754] = 47049,
	[35755] = 47050,
	[35756] = 47051,
	[35766] = 47054,
	[35767] = 47055,
	[35768] = 47056,
	[35769] = 47053,
	[37330] = 44596,
	[37331] = 44556,
	[37332] = 44483,
	[37333] = 44494,
	[37334] = 44590,
	[37339] = 44621,
	[37340] = 44588,
	[37344] = 44524,
	[37347] = 44591,
	[37349] = 44631,
	[44471] = 47672,
	[44472] = 47898,
	[44473] = 44595,
	[44483] = 60691,
	[44484] = 44575,
	[44485] = 44625,
	[44486] = 60707,
	[44487] = 60714,
	[44488] = 47899,
	[44489] = 60692,
	[44490] = 60763,
	[44491] = 47901,
	[44492] = 59621,
	[44494] = 44576,
	[44495] = 59625,
	[44496] = 59619,
	[44498] = 60767,
	[44564] = 53936,
	[44565] = 53939,
	[44566] = 53937,
	[44567] = 53942,
	[44568] = 53938,
	[44916] = 26403,
	[44917] = 26407,
	[44918] = 26443,
	[44919] = 26442,
	[44944] = 62256,
	[99999] = 9957
}

local function LoadRecipe()
	local recipelist = addon:GetRecipeTable()

	if (not recipelist) then
		if (addon.db.profile.autoloaddb) then
			local dbloaded
			dbloaded, recipelist = addon:InitRecipeData()

			if (not dbloaded) then return end

			addon:AddRecipeData(GetSpellInfo(51304))
			addon:AddRecipeData(GetSpellInfo(51300))
			addon:AddRecipeData(GetSpellInfo(51296))
			addon:AddRecipeData(GetSpellInfo(51313))
			addon:AddRecipeData(GetSpellInfo(51306))
			addon:AddRecipeData(GetSpellInfo(45542))
			addon:AddRecipeData(GetSpellInfo(51302))
			addon:AddRecipeData(GetSpellInfo(32606))
			addon:AddRecipeData(GetSpellInfo(51309))
			addon:AddRecipeData(GetSpellInfo(51311))
			addon:AddRecipeData(GetSpellInfo(45363))
			addon:AddRecipeData(GetSpellInfo(53428))
		else
			addon:Print(L["DATAMINER_NODB_ERROR"])
			return
		end
	else
		-- Recipe DB exists, we just need to populate it now
		if (addon.db.profile.autoloaddb) then
			addon:AddRecipeData(GetSpellInfo(51304))
			addon:AddRecipeData(GetSpellInfo(51300))
			addon:AddRecipeData(GetSpellInfo(51296))
			addon:AddRecipeData(GetSpellInfo(51313))
			addon:AddRecipeData(GetSpellInfo(51306))
			addon:AddRecipeData(GetSpellInfo(45542))
			addon:AddRecipeData(GetSpellInfo(51302))
			addon:AddRecipeData(GetSpellInfo(32606))
			addon:AddRecipeData(GetSpellInfo(51309))
			addon:AddRecipeData(GetSpellInfo(51311))
			addon:AddRecipeData(GetSpellInfo(45363))
			addon:AddRecipeData(GetSpellInfo(53428))
		end
	end
	return recipelist
end

local function CreateReverseLookup(recipelist)
	if (not recipelist) then
		addon:Print(L["DATAMINER_NODB_ERROR"])
		return
	end

	local t = {}

	for i in pairs(recipelist) do
		--if t[recipelist[i]["Name"]] then addon:Print("Dupe: " .. i) end
		t[recipelist[i]["Name"]] = i
	end

	return t

end

local ARLDatamineTT = CreateFrame("GameTooltip", "ARLDatamineTT", UIParent, "GameTooltipTemplate")

do
	-- Tables used in all the Scan functions within this do block. -Torhal
	local info, output = {}, {}

	--- Function to compare the skill levels of a trainers recipes with those in the ARL database.
	-- @name AckisRecipeList:ScanSkillLevelData
	-- @param autoscan True when autoscan is enabled in preferences, it will surpress output letting you know when a scan has occured.
	-- @return Does a comparison of the information in your internal ARL database, and those items which are available on the trainer.  Compares the skill levels between the two.

	function addon:ScanSkillLevelData(autoscan)
		if (IsTradeskillTrainer()) then	-- Are we at a trade skill trainer?
			local recipelist = LoadRecipe()	-- Get internal database

			if (not recipelist) then
				self:Print(L["DATAMINER_NODB_ERROR"])
				return
			end
			-- Get the initial trainer filters
			local avail = GetTrainerServiceTypeFilter("available")
			local unavail = GetTrainerServiceTypeFilter("unavailable")
			local used = GetTrainerServiceTypeFilter("used")

			-- Clear the trainer filters
			SetTrainerServiceTypeFilter("available", 1)
			SetTrainerServiceTypeFilter("unavailable", 1)
			SetTrainerServiceTypeFilter("used", 1)

			twipe(info)

			-- Get the skill levels from the trainer
			for i = 1, GetNumTrainerServices(), 1 do
				local name = GetTrainerServiceInfo(i)
				local _, skilllevel = GetTrainerServiceSkillReq(i)
				if not skilllevel then
					skilllevel = 0
				end
				info[name] = skilllevel
			end
			local entryfound = false
			twipe(output)

			for i in pairs(recipelist) do
				local i_name = recipelist[i]["Name"]
				if (info[i_name]) and (info[i_name] ~= recipelist[i]["Level"]) then
					entryfound = true
					tinsert(output, L["DATAMINER_SKILLELVEL"]:format(i_name, recipelist[i]["Level"], info[i_name]))
				end
			end
			tinsert(output, "Trainer Skill Level Scan Complete.")

			if (entryfound) then
				self:DisplayTextDump(nil, nil, tconcat(output, "\n"))
			end
			-- Reset the filters to what they were before
			SetTrainerServiceTypeFilter("available", avail or 0)
			SetTrainerServiceTypeFilter("unavailable", unavail or 0)
			SetTrainerServiceTypeFilter("used", used or 0)

		elseif (not autoscan) then
			self:Print(L["DATAMINER_SKILLLEVEL_ERROR"])
		end
	end

	-------------------------------------------------------------------------------
	--- Function to compare which recipes are available from a trainer and compare with the internal ARL database.
	-- @name AckisRecipeList:ScanTrainerData
	-- @param autoscan True when autoscan is enabled in preferences, it will surpress output letting you know when a scan has occured.
	-- @return Does a comparison of the information in your internal ARL database, and those items which are available on the trainer.
	--         Compares the acquire information of the ARL database with what is available on the trainer.
	-------------------------------------------------------------------------------
	function addon:ScanTrainerData(autoscan)
		if (UnitExists("target") and (not UnitIsPlayer("target")) and (not UnitIsEnemy("player", "target"))) then	-- Make sure the target exists and is a NPC
			local targetname = UnitName("target")	-- Get its name
			local targetID = tonumber(string.sub(UnitGUID("target"),-12,-7),16)	-- Get the NPC ID

			if (IsTradeskillTrainer()) then		-- Are we at a trade skill trainer?
				local recipelist = LoadRecipe()	-- Get internal database

				if (not recipelist) then
					self:Print(L["DATAMINER_NODB_ERROR"])
					return
				end

				-- Get the initial trainer filters
				local avail = GetTrainerServiceTypeFilter("available")
				local unavail = GetTrainerServiceTypeFilter("unavailable")
				local used = GetTrainerServiceTypeFilter("used")

				-- Clear the trainer filters
				SetTrainerServiceTypeFilter("available", 1)
				SetTrainerServiceTypeFilter("unavailable", 1)
				SetTrainerServiceTypeFilter("used", 1)

				if (GetNumTrainerServices() == 0) then
					self:Print("Warning: Trainer is bugged, reporting 0 trainer items.")
				end
				twipe(info)

				-- Get all the names of recipes from the trainer
				for i = 1, GetNumTrainerServices(), 1 do
					local name = GetTrainerServiceInfo(i)
					info[name] = true
				end
				twipe(output)

				-- Dump out trainer info
				tinsert(output, L["DATAMINER_TRAINER_INFO"]:format(targetname, targetID))

				local teach = {}
				local noteach = {}
				local teachflag = false
				local noteachflag = false

				for i in pairs(recipelist) do
					local i_name = recipelist[i]["Name"]
					local acquire = recipelist[i]["Acquire"]
					local flags = recipelist[i]["Flags"]

					-- If the trainer teaches this recipe
					if (info[i_name]) then
						local found = false
						-- Parse acquire info
						for j in pairs(acquire) do
							if (acquire[j]["Type"] == 1) then
								if (acquire[j]["ID"] == targetID) then
									found = true
								end
							end
						end

						if (not found) then
							tinsert(teach, i)
							teachflag = true

							if (not flags[3]) then
								tinsert(output, ": Trainer flag needs to be set.")
							end
						end
						-- Trainer does not teach this recipe
					else
						local found = false
						-- Parse acquire info
						for j in pairs(acquire) do
							if (acquire[j]["Type"] == 1) then
								if (acquire[j]["ID"] == targetID) then
									found = true
								end
							end
						end
						if (found) then
							noteachflag = true
							tinsert(noteach, i)
						end
					end
				end

				if (teachflag) then
					tinsert(output, "Missing entries (need to be added):")
					tsort(teach)
					for i in ipairs(teach) do
						tinsert(output, L["DATAMINER_TRAINER_TEACH"]:format(teach[i], recipelist[teach[i]]["Name"]))
					end
				end

				if (noteachflag) then
					tinsert(output, "Extra entries (need to be removed):")
					tsort(noteach)
					for i in ipairs(noteach) do
						tinsert(output, L["DATAMINER_TRAINER_NOTTEACH"]:format(noteach[i], recipelist[noteach[i]]["Name"]))
					end
				end
				tinsert(output, "Trainer Acquire Scan Complete.")

				if ((teachflag) or (noteachflag)) then
					self:DisplayTextDump(nil, nil, tconcat(output, "\n"))
				end

				-- Reset the filters to what they were before
				SetTrainerServiceTypeFilter("available", avail or 0)
				SetTrainerServiceTypeFilter("unavailable", unavail or 0)
				SetTrainerServiceTypeFilter("used", used or 0)

			elseif (not autoscan) then
				self:Print(L["DATAMINER_SKILLLEVEL_ERROR"])
			end
		else
			if (not autoscan) then
				self:Print(L["DATAMINER_TRAINER_NOTTARGETTED"])
			end
		end
	end
end	--do

--- Generates tradeskill links for all professions so you can scan them for completeness.
-- @name AckisRecipeList:GenerateLinks
-- @return Generates tradeskill links with all recipes.  Used for testing to see if a recipe is missing from the database or not.
function addon:GenerateLinks()
	-- This code adopted from Gnomish Yellow Pages with permission

	local guid = UnitGUID("player")
	local playerGUID = string.gsub(guid,"0x0+", "")

	-- Listing of all tradeskill professions
	local tradelist = {51304, 51300, 51313, 51306, 45363, 51311, 51302, 51309, 51296, 45542}

--[[
	local encodingLength = floor((#recipeList+5) / 6)

	local encodedString = string.rep("/",encodingLength)
]]--
	local bitmap = {}
	bitmap[45542] = "8bffAA" -- First Aid (6)
	bitmap[51296] = "2/7///7///9////7//////////g+/B" -- Cooking (30)
	bitmap[51306] = "4/////////////3nFA+///9+/P7//f//n//9dgdJgHA87/3f/TolD" -- Engineering (53)
	--bitmap[51302] = "e+//////////////v//P+f///3///7/9f9//////////f///////HQ5+////B4//+///////5///////PA/Eg//" -- LW (87)
	bitmap[51302] = string.rep("/",87)
	bitmap[51304] = "2//v//////f////3//v///////6//////////9////X" -- Alchemy (43)
	bitmap[51300] = string.rep("/",85) -- Blacksmithing (85)
	bitmap[51309] = string.rep("/",71) -- Tailoring (71)
	bitmap[51311] = string.rep("/",83) -- JC 83
	bitmap[45363] = string.rep("/",74) -- Inscription (74)
	--bitmap[51313] = "4//////////7///////////w//++/9vn7///////3P/t/n//BAB" -- Enchanting
	--bitmap[51313] = "4//////////7///////////w//++/9vn7///////3P/t/n//BAD" -- Enchanting (51)
	bitmap[51313] = string.rep("/",51) -- Enchanting (51)

	for i in pairs(tradelist) do

		local tradeName = GetSpellInfo(tradelist[i])
		local tradelink = {}
		tradelink[1] = "|cffffd000|Htrade:"
		tradelink[2] = tradelist[i]
		tradelink[3] = ":450:450:"
		tradelink[4] = playerGUID
		tradelink[5] = ":"
		tradelink[6] = bitmap[tradelist[i]]
		tradelink[7] = "|h["
		tradelink[8] = tradeName
		tradelink[9] = "]|h|r"

		if (bitmap[tradelist[i]]) then
			self:Print(tconcat(tradelink,""))
		else
			self:Print("I don't have the bitmap for " .. tradeName .. " yet.")
		end
		-- /script DEFAULT_CHAT_FRAME:AddMessage(gsub(GetTradeSkillListLink(), "\124", "\124\124"))
	end

end

-------------------------------------------------------------------------------
--- Scans the items in the specified profession
-------------------------------------------------------------------------------
do

	local ORDERED_PROFESSIONS = { 
		strlower(GetSpellInfo(51304)),	-- 1 Alchemy
		strlower(GetSpellInfo(51300)),	-- 2 Blacksmithing
		strlower(GetSpellInfo(51296)),	-- 3 Cooking
		strlower(GetSpellInfo(51313)),	-- 4 Enchanting
		strlower(GetSpellInfo(51306)),	-- 5 Engineering
		strlower(GetSpellInfo(45542)),	-- 6 First Aid
		strlower(GetSpellInfo(45363)),	-- 7 Inscription
		strlower(GetSpellInfo(51311)),	-- 8 Jewelcrafting
		strlower(GetSpellInfo(51302)),	-- 9 Leatherworking
		strlower(GetSpellInfo(53428)),	-- 10 Runeforging
		strlower(GetSpellInfo(32606)),	-- 11 Smelting
		strlower(GetSpellInfo(51309)),	-- 12 Tailoring
	}
	local recipe_list = {}

	--- Parses all recipes for a specified profession, scanning their tool tips.
	-- @name AckisRecipeList:ScanProfession
	-- @param prof_name The profession name which you wish to scan.
	-- @return Recipes in the given profession have their tooltips scanned.
	function addon:ScanProfession(prof_name)
		local found = false
		prof_name = strlower(prof_name)

		for idx, name in ipairs(ORDERED_PROFESSIONS) do
			if prof_name == name then
				found = true
				break
			end
		end

		if not found then
			self:Print(L["DATAMINER_NODB_ERROR"])
			return
		end
		local master_list = LoadRecipe()
		
		if not master_list then
			self:Print(L["DATAMINER_NODB_ERROR"])
			return
		end
		twipe(recipe_list)

		for i in pairs(master_list) do
			local prof = strlower(master_list[i]["Profession"])

			if prof and prof == prof_name then
				recipe_list[i] = master_list[i]
			end
		end
		local reverselookup = CreateReverseLookup(recipe_list)

		ARLDatamineTT:SetOwner(WorldFrame, "ANCHOR_NONE")
		GameTooltip_SetDefaultAnchor(ARLDatamineTT, UIParent)

		-- Parse the entire recipe database
		for i in pairs(recipe_list) do
			local name = recipe_list[i]["Name"]
			local link = recipe_list[i]["RecipeLink"]

			if link then
				ARLDatamineTT:SetHyperlink(link)
				self:ScanToolTip(name, recipe_list, reverselookup, false)
			else
				self:Print("Missing RecipeLink for ID " .. i .. " - " .. name .. " (If these are DK abilities, don't worry, that's normal.")
			end
		end
		ARLDatamineTT:Hide()
	end

end

--- Scans the items on a vendor, determining which recipes are available if any and compares it with the database entries.
-- @name AckisRecipeList:ScanVendor
-- @return Obtains all the vendor information on tradeskill recipes and attempts to compare the current vendor with the internal database.
function addon:ScanVendor()
	if (UnitExists("target") and (not UnitIsPlayer("target")) and (not UnitIsEnemy("player", "target"))) then	-- Make sure the target exists and is a NPC
		local recipelist = LoadRecipe()		-- Get internal database

		if (not recipelist) then
			self:Print(L["DATAMINER_NODB_ERROR"])
			return
		end
		local reverselookup = CreateReverseLookup(recipelist)

		local targetname = UnitName("target")		-- Get its name
		local targetID = tonumber(string.sub(UnitGUID("target"),-12,-7),16)		-- Get the NPC ID

		ARLDatamineTT:SetOwner(WorldFrame, "ANCHOR_NONE")
		GameTooltip_SetDefaultAnchor(ARLDatamineTT, UIParent)

		-- Parse all the items on the merchant
		for i = 1, GetMerchantNumItems(), 1 do
			local name, _, _, _, numAvailable = GetMerchantItemInfo(i)
			ARLDatamineTT:SetMerchantItem(i)
			self:ScanToolTip(name, recipelist, reverselookup, true)
		end
		ARLDatamineTT:Hide()
	else
		self:Print(L["DATAMINER_VENDOR_NOTTARGETTED"])
	end

end

--- Parses all the recipes in the database, and scanning their tooltips.
-- @name AckisRecipeList:TooltipScanDatabase
-- @return Entire recipe database has its tooltips scanned.
function addon:TooltipScanDatabase()
	-- Get internal database
	local recipelist = LoadRecipe()

	if (not recipelist) then
		self:Print(L["DATAMINER_NODB_ERROR"])
		return
	end
	local reverselookup = CreateReverseLookup(recipelist)

	ARLDatamineTT:SetOwner(WorldFrame, "ANCHOR_NONE")
	GameTooltip_SetDefaultAnchor(ARLDatamineTT, UIParent)

	-- Parse the entire recipe database
	for i in pairs(recipelist) do

		local name = recipelist[i]["Name"]
		local link = recipelist[i]["RecipeLink"]

		if link then
			ARLDatamineTT:SetHyperlink(link)
			self:ScanToolTip(name,recipelist,reverselookup,false)
		else
			self:Print("Missing RecipeLink for ID " .. i .. " - " .. name .. " (If these are DK abilities, don't worry, that's normal.")
		end
	end
	ARLDatamineTT:Hide()
end

--- Parses a specific recipe in the database, and scanning its tooltips.
-- @name AckisRecipeList:TooltipScanDatabase
-- @param SpellID The [http://www.wowwiki.com/SpellLink Spell ID] of the recipe being added to the database.
-- @return Recipe has its tooltips scanned.
function addon:TooltipScanRecipe(spellid)

	-- Get internal database
	local recipelist = LoadRecipe()

	if (not recipelist) then
		self:Print(L["DATAMINER_NODB_ERROR"])
		return
	end

	local reverselookup = CreateReverseLookup(recipelist)

	ARLDatamineTT:SetOwner(WorldFrame, "ANCHOR_NONE")
	GameTooltip_SetDefaultAnchor(ARLDatamineTT, UIParent)

	if (recipelist[spellid]) then

	local name = recipelist[spellid]["Name"]
	local link = recipelist[spellid]["RecipeLink"]

		-- If a link exists, we'll scan it.
		if (link) then
			ARLDatamineTT:SetHyperlink(link)
			self:ScanToolTip(name,recipelist,reverselookup,false)
		-- Lets hide this output for runeforging.
		elseif (recipelist[spellid]["Profession"] ~= GetSpellInfo(53428)) then
			self:Print("Missing RecipeLink for ID " .. spellid .. " - " .. name .. " (If these are DK abilities, don't worry, that's normal.")
		end

		-- We have a reverse look-up for the item which creates the spell (aka the recipe itself)
		if (spellitem[spellid]) then
			ARLDatamineTT:SetHyperlink("item:" .. spellitem[spellid] .. ":0:0:0:0:0:0:0")
			self:ScanToolTip(name,recipelist,reverselookup,false)		
		end

	else
		self:Print("Spell ID does not exist in the database.")
	end

	ARLDatamineTT:Hide()

end

local recipenames = {
	-- JC
	["design: "] = true,
	-- LW or Tailoring
	["pattern: "] = true,
	-- Alchemy or Cooking
	["recipe: "] = true,
	-- BS
	["plans: "] = true,
	-- Enchanting
	["formula: "] = true,
	-- Engineering
	["schematic: "] = true,
	-- First Aid
	["manual: "] = true,

	["alchemy: "] = true,
	["blacksmithing: "] = true,
	["cooking: "] = true,
	["enchanting: "] = true,
	["engineering: "] = true,
	["first aid: "] = true,
	["inscription: "] = true,
	["jewelcrafting: "] = true,
	["leatherworking: "] = true,
	["tailoring: "] = true,
}

local specialtytext = {
	["requires spellfire tailoring"] = 26797,
	["requires mooncloth tailoring"] = 26798,
	["requires shadowweave tailoring"] = 26801,
	["dragonscale leatherworking"] = 10657,
	["elemental leatherworking"] = 10659,
	["tribal leatherworking"] = 10661,
	["gnomish engineering"] = 20219,
	["goblin engineering"] = 20222,
	["armorsmith"] = 9788,
	["master axesmith"] = 17041,
	["master hammersmith"] = 17040,
	["master swordsmith"] = 17039,
	["weaponsmith"] = 9787,
}

local factiontext = {
	["thorium brotherhood"] = 98,
	["zandalar tribe"] = 100,
	["argent dawn"] = 96,
	["timbermaw hold"] = 99,
	["cenarion circle"] = 97,
	["the aldor"] = 101,
	["the consortium"] = 105,
	["the scryers"] = 110,
	["the sha'tar"] = 111,
	["the mag'har"] = 108,
	["cenarion expedition"] = 103,
	["honor hold"] = 104,
	["thrallmar"] = 104,
	["the violet eye"] = 114,
	["sporeggar"] = 113,
	["kurenai"] = 108,
	["keepers of time"] = 106,
	["the scale of the sands"] = 109,
	["lower city"] = 107,
	["ashtongue deathsworn"] = 102,
	["alliance vanguard"] = 131,
	["valiance expedition"] = 126,
	["horde expedition"] = 130,
	["the taunka"] = 128,
	["the hand of vengeance"] = 127,
	["explorers' league"] = 125,
	["the kalu'ak"] = 120,
	["shattered sun offensive"] = 112,
	["warsong offensive"] = 129,
	["kirin tor"] = 118,
	["the wyrmrest accord"] = 122,
	["knights of the ebon blade"] = 117,
	["frenzyheart tribe"] = 116,
	["the oracles"] = 121,
	["argent crusade"] = 115,
	["the sons of hodir"] = 119,
}

local factionlevels = {
	["neutral"] = 0,
	["friendly"] = 1,
	["honored"] = 2,
	["revered"] = 3,
	["exalted"] = 4,
}

--- Parses the mining tooltip for certain keywords, comparing them with the database flags.
-- @name AckisRecipeList:ScanToolTip
-- @return Scans a tooltip, and outputs the missing or extra filter flags.
function addon:ScanToolTip(name, recipelist, reverselookup, isvendor)

	local recipefound = false
	local boprecipe = false
	local bopitem = false
	local healer = false
	local tank = false
	local dps = false
	local caster = false

	local Deathknight = false
	local Druid = false
	local Hunter = false
	local Mage = false
	local Paladin = false
	local Priest = false
	local Shaman = false
	local Rogue = false
	local Warlock = false
	local Warrior = false

	local Cloth = false
	local Leather = false
	local Mail = false
	local Plate = false
	local Cloak = false
	local Trinket = false
	local Ring = false
	local Necklace = false
	local Shield  = false
	local OneHanded = false
	local TwoHanded = false
	local Axe = false
	local Sword = false
	local Mace = false
	local Polearm = false
	local Dagger = false
	local Staff = false
	local Wand = false
	local Thrown = false
	local Bow = false
	local Crossbow = false
	local Ammo = false
	local Fist = false
	local Gun = false

	local specialty = false
	local repid = false
	local repidlevel = false
	local confirmed_role = false

	local matchtext

	-- Parse all the lines of the tooltip
	for i =1 , ARLDatamineTT:NumLines(), 1 do

		local linetextl = _G["ARLDatamineTTTextLeft" .. i]
		local textl = linetextl:GetText()
		local linetextr = _G["ARLDatamineTTTextRight" .. i]
		local textr = linetextr:GetText()
		local text
 
		if (textr) then
			text = textl .. " " .. textr
		else
			text = textl
		end

		local text = strlower(text)

		-- Check to see if it's a recipe otherwise break out of the for loop
		if (i == 1) then
			-- Get the header of the tooltip aka Pattern:
			matchtext = strmatch(text, "%a+: ")

			-- If the header is not a recipe
			if (not recipenames[matchtext]) then
				break
			else
				recipefound = true
			end
		-- We're on the second line or beyond in the tooltip now
		-- Check for recipe/item binding
		-- The recipe binding is within the first few lines of the tooltip always
		elseif ((strmatch(text, "binds when picked up")) and (i < 4)) then
			boprecipe = true
		elseif ((strmatch(text, "binds when picked up")) and (i > 3)) then
			bopitem = true
		-- Recipe Specialities
		elseif (specialtytext[text]) then
			specialty = specialtytext[text]
		-- Recipe Reputatons
		elseif (strmatch(text, "Requires (.+) %- (.+)")) then
			local rep,replevel = strmatch(text, "Requires (.+) %- (.+)")
			if (factiontext[rep]) then
				repid = factiontext[rep]
				repidlevel = factionlevels[replevel]
			end
		-- Certain stats can be considered for a specific role (aka spell hit == caster dps).
		-- confirmed_role will be toggled to true when we get to a stat that is specific to that class
		elseif (strmatch(text, "strength")) then
			tank = true
			dps = true
			caster = false
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "agility")) then
			tank = true
			dps = true
			caster = false
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "spirit")) then
			tank = false
			dps = false
			caster = true
			healer = true
			confirmed_role = true
			-- Caster stats
		elseif (strmatch(text, "spell power")) then
			caster = true
			tank = false
			dps = false
			healer = true
			confirmed_role = true
		elseif (strmatch(text, "spell crit")) then
			caster = true
			tank = false
			dps = false
			healer = true
			confirmed_role = true
			-- DPS Caster Stats
		elseif (strmatch(text, "spell hit")) then
			caster = true
			tank = false
			dps = false
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "spell penetration")) then
			caster = true
			tank = false
			dps = false
			healer = false
			confirmed_role = true
			-- Healer Stats
		elseif (strmatch(text, "mana every 5 seconds")) then
			caster = false
			tank = false
			dps = false
			healer = true
			confirmed_role = true
			-- Melee DPS Stats
		elseif (strmatch(text, "attack power")) then
			caster = false
			tank = false
			dps = true
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "expertise")) then
			caster = false
			tank = false
			dps = true
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "melee crit")) then
			caster = false
			tank = false
			dps = true
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "ranged crit")) then
			caster = false
			tank = false
			dps = true
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "melee haste")) then
			caster = false
			tank = false
			dps = true
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "ranged haste")) then
			caster = false
			tank = false
			dps = true
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "melee hit")) then
			caster = false
			tank = false
			dps = true
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "ranged hit")) then
			caster = false
			tank = false
			dps = true
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "armor pen")) then
			caster = false
			tank = false
			dps = true
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "feral attack")) then
			caster = false
			tank = true
			dps = true
			healer = false
			confirmed_role = true
			-- Tanking Stats
		elseif (strmatch(text, "defense")) then
			tank = true
			dps = false
			caster = false
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "block")) then
			tank = true
			dps = false
			caster = false
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "parry")) then
			tank = true
			dps = false
			caster = false
			healer = false
			confirmed_role = true
		elseif (strmatch(text, "dodge")) then
			tank = true
			dps = false
			caster = false
			healer = false
			confirmed_role = true
		-- Classes
		elseif (strmatch(text, "death knight")) then
			Deathknight = true
		elseif (strmatch(text, "druid")) then
			Druid = true
		elseif (strmatch(text, "hunter")) then
			Hunter = true
		elseif (strmatch(text, "mage")) then
			Mage = true
		elseif (strmatch(text, "paladin")) then
			Paladin = true
		elseif (strmatch(text, "priest")) then
			Priest = true
		elseif (strmatch(text, "rogue")) then
			Rogue = true
		elseif (strmatch(text, "shaman")) then
			Shaman = true
		elseif (strmatch(text, "warlock")) then
			Warlock = true
		elseif (strmatch(text, "warrior")) then
			Warrior = true
		-- Armor types
		elseif (strmatch(text, "cloth")) then
			Cloth = true
		elseif (strmatch(text, "leather")) then
			Leather = true
		elseif (strmatch(text, "mail")) then
			Mail = true
		elseif (strmatch(text, "plate")) then
			Plate = true
		elseif (strmatch(text, "cloak")) then
			Cloak = true
		elseif (strmatch(text, "ring")) then
			Ring = true
		elseif (strmatch(text, "necklace")) then
			Necklace = true
		elseif (strmatch(text, "shield")) then
			Shield = true
		-- Weapon types
		elseif (strmatch(text, "1 hand")) or (strmatch(text, "off hand")) then
			OneHanded = true
		elseif (strmatch(text, "2 hand")) then
			TwoHanded = true
		elseif (strmatch(text, "axe")) then
			Axe = true
		elseif (strmatch(text, "sword")) then
			Sword = true
		elseif (strmatch(text, "mace")) then
			Mace = true
		elseif (strmatch(text, "polearm")) then
			Polearm = true
		elseif (strmatch(text, "dagger")) then
			Dagger = true
		elseif (strmatch(text, "staff")) then
			Staff = true
		elseif (strmatch(text, "wand")) then
			Wand = true
		elseif (strmatch(text, "thrown")) then
			Thrown = true
		elseif (strmatch(text, "bow")) then
			Bow = true
		elseif (strmatch(text, "crossbow")) then
			Crossbow = true
		elseif (strmatch(text, "gun")) then
			Gun = true
		elseif (strmatch(text, "ammo")) then
			Ammo = true
		elseif (strmatch(text, "fist")) then
			Fist = true
		end
	end

	if (recipefound) then
		-- Parse the recipe database until we get a match on the name
		local spellid
		local recipename = gsub(name, "%a+%?: ", "")

		spellid = reverselookup[recipename]

		if (not spellid) then
			self:Print("Recipe "..recipename.." has no reverse lookup")
		end

		local flags = recipelist[spellid]["Flags"]
		local missingflags = {}
		local extraflags = {}

		if specialty then
			self:Print(GetSpellInfo(specialty))
		end

		if (isvendor) then
			-- Vendor Flag
			if (not flags[4]) then
				tinsert(missingflags,"4")
			end
			-- PVP Flag
			if (((GetSubZoneText() == "Wintergrasp Fortress") or (GetSubZoneText() == "Wintergrasp Fortress")) and (not flags[9])) then
				tinsert(missingflags, "9")
			elseif (flags[9]) then
				tinsert(extraflags, "9")
			end
		end

		if (flags[3]) then
			boprecipe = true
		end

		-- Classes
		-- If we've picked up at least one class flag
		if (Deathknight) or (Druid) or (Hunter) or (Mage) or (Paladin) or (Priest) or (Shaman) or (Warlock) or (Warrior) then
			if (Deathknight) and (not flags[21]) then
				tinsert(missingflags, "21")
			elseif (not Deathknight) and (flags[21]) then
				tinsert(extraflags, "21")
			end
			if (Druid) and (not flags[22]) then
				tinsert(missingflags, "22")
			elseif (not Druid) and (flags[22]) then
				tinsert(extraflags, "22")
			end
			if (Hunter) and (not flags[23]) then
				tinsert(missingflags, "23")
			elseif (not Hunter) and (flags[23]) then
				tinsert(extraflags, "23")
			end
			if (Mage) and (not flags[24]) then
				tinsert(missingflags, "24")
			elseif (not Mage) and (flags[24]) then
				tinsert(extraflags, "24")
			end
			if (Paladin) and (not flags[25]) then
				tinsert(missingflags, "25")
			elseif (not Paladin) and (flags[25]) then
				tinsert(extraflags, "25")
			end
			if (Priest) and (not flags[26]) then
				tinsert(missingflags, "26")
			elseif (not Priest) and (flags[26]) then
				tinsert(extraflags, "26")
			end
			if (Shaman) and (not flags[27]) then
				tinsert(missingflags, "27")
			elseif (not Shaman) and (flags[27]) then
				tinsert(extraflags, "27")
			end
			if (Rogue) and (not flags[28]) then
				tinsert(missingflags, "28")
			elseif (not Rogue) and (flags[28]) then
				tinsert(extraflags, "28")
			end
			if (Warlock) and (not flags[29]) then
				tinsert(missingflags, "29")
			elseif (not Warlock) and (flags[29]) then
				tinsert(extraflags, "29")
			end
			if (Warrior) and (not flags[30]) then
				tinsert(missingflags, "30")
			elseif (not Warrior) and (flags[30]) then
				tinsert(extraflags, "30")
			end
		-- Recipe is not class specific
		else
			if (not flags[21]) then
				tinsert(missingflags, "21")
			end
			if (not flags[22]) then
				tinsert(missingflags, "22")
			end
			if (not flags[23]) then
				tinsert(missingflags, "23")
			end
			if (not flags[24]) then
				tinsert(missingflags, "24")
			end
			if (not flags[25]) then
				tinsert(missingflags, "25")
			end
			if (not flags[26]) then
				tinsert(missingflags, "26")
			end
			if (not flags[27]) then
				tinsert(missingflags, "27")
			end
			if (not flags[28]) then
				tinsert(missingflags, "28")
			end
			if (not flags[29]) then
				tinsert(missingflags, "29")
			end
			if (not flags[30]) then
				tinsert(missingflags, "30")
			end
		end

		-- BoP Item
		if (bopitem) and (not flags[37]) then
			tinsert(missingflags, "37")
			-- If it's a BoP item and flags BoE is set, mark it as extra
			if (flags[36]) then
				tinsert(extraflags, "36")
			end
			-- If it's a BoP item and flags BoA is set, mark it as extra
			if (flags[38]) then
				tinsert(extraflags, "38")
			end
		-- BoE Item, assuming it's not BoA
		elseif (not flags[36]) and (not bopitem) then
			tinsert(missingflags, "36")
			-- If it's a BoE item and flags BoP is set, mark it as extra
			if (flags[37]) then
				tinsert(extraflags, "37")
			end
			-- If it's a BoE item and flags BoA is set, mark it as extra
			if (flags[38]) then
				tinsert(extraflags, "38")
			end
		end

		-- BoP Recipe
		if (boprecipe) and (not flags[41]) then
			tinsert(missingflags, "41")
			-- If it's a BoP recipe and flags BoE is set, mark it as extra
			if (flags[40]) then
				tinsert(extraflags, "40")
			end
			-- If it's a BoP recipe and flags BoA is set, mark it as extra
			if (flags[42]) then
				tinsert(extraflags, "42")
			end
		-- Not BoP recipe, assuming it's not BoA
		elseif (not flags[40]) and (not boprecipe) then
			tinsert(missingflags, "40")
			-- If it's a BoE recipe and flags BoP is set, mark it as extra
			if (flags[41]) then
				tinsert(extraflags, "41")
			end
			-- If it's a BoE recipe and flags BoA is set, mark it as extra
			if (flags[42]) then
				tinsert(extraflags, "42")
			end
		end

		-- Player type
		if (dps) and (not flags[51]) then
			tinsert(missingflags, "51")
		elseif (flags[51]) and (not dps) then
			tinsert(extraflags, "51")
		end
		if (tank) and (not flags[52]) then
			tinsert(missingflags, "52")
		elseif (flags[52]) and (not tank) then
			tinsert(extraflags, "52")
		end
		if (healer) and (not flags[53]) then
			tinsert(missingflags, "53")
		elseif (flags[53]) and (not healer) then
			tinsert(extraflags, "53")
		end
		if (caster) and (not flags[54]) then
			tinsert(missingflags, "54")
		elseif (flags[54]) and (not caster) then
			tinsert(extraflags, "54")
		end

		-- Item Type
		if (Cloth) and (not flags[56]) then
			tinsert(missingflags, "56")
		elseif (not Cloth) and (flags[56]) then
			tinsert(extraflags, "56")
		end
		if (Leather) and (not flags[57]) then
			tinsert(missingflags, "57")
		elseif (not Leather) and (flags[57]) then
			tinsert(extraflags, "57")
		end
		if (Mail) and (not flags[58]) then
			tinsert(missingflags, "58")
		elseif (not Mail) and (flags[58]) then
			tinsert(extraflags, "58")
		end
		if (Plate) and (not flags[59]) then
			tinsert(missingflags, "59")
		elseif (not Plate) and (flags[59]) then
			tinsert(extraflags, "59")
		end

		-- Weapon type
		if (OneHanded) and (not flags[66]) then
			tinsert(missingflags, "66")
		elseif (not OneHanded) and (flags[66]) then
			tinsert(extraflags, "66")
		end
		if (TwoHanded) and (not flags[67]) then
			tinsert(missingflags, "67")
		elseif (not TwoHanded) and (flags[67]) then
			tinsert(extraflags, "67")
		end
		if (Axe) and (not flags[68]) then
			tinsert(missingflags, "68")
		elseif (not Axe) and (flags[68]) then
			tinsert(extraflags, "68")
		end
		if (Sword) and (not flags[69]) then
			tinsert(missingflags, "69")
		elseif (not Sword) and (flags[69]) then
			tinsert(extraflags, "69")
		end
		if (Mace) and (not flags[70]) then
			tinsert(missingflags, "70")
		elseif (not Mace) and (flags[70]) then
			tinsert(extraflags, "70")
		end
		if (Polearm) and (not flags[71]) then
			tinsert(missingflags, "71")
		elseif (not Polearm) and (flags[71]) then
			tinsert(extraflags, "71")
		end
		if (Dagger) and (not flags[72]) then
			tinsert(missingflags, "72")
		elseif (not Dagger) and (flags[72]) then
			tinsert(extraflags, "72")
		end
		if (Staff) and (not flags[73]) then
			tinsert(missingflags, "73")
		elseif (not Staff) and (flags[73]) then
			tinsert(extraflags, "73")
		end
		if (Wand) and (not flags[74]) then
			tinsert(missingflags, "74")
		elseif (not Wand) and (flags[74]) then
			tinsert(extraflags, "74")
		end
		if (Thrown) and (not flags[75]) then
			tinsert(missingflags, "75")
		elseif (not Thrown) and (flags[75]) then
			tinsert(extraflags, "75")
		end
		if (Bow) and (not flags[76]) then
			tinsert(missingflags, "76")
		elseif (not Bow) and (flags[76]) then
			tinsert(extraflags, "76")
		end
		if (Crossbow) and (not flags[77]) then
			tinsert(missingflags, "77")
		elseif (not Crossbow) and (flags[77]) then
			tinsert(extraflags, "77")
		end
		if (Ammo) and (not flags[78]) then
			tinsert(missingflags, "78")
		elseif (not Ammo) and (flags[78]) then
			tinsert(extraflags, "78")
		end
		if (Fist) and (not flags[79]) then
			tinsert(missingflags, "79")
		elseif (not Fist) and (flags[79]) then
			tinsert(extraflags, "79")
		end
		if (Gun) and (not flags[80]) then
			tinsert(missingflags, "80")
		elseif (not Gun) and (flags[80]) then
			tinsert(extraflags, "80")
		end

		-- Reputations
		if (repid) and (not flags[repid]) then
			tinsert(missingflags,repid)
		end

		if (#missingflags > 0) or (#extraflags > 0) then
			self:Print(recipename .. " " .. spellid)
			if (#missingflags > 0) then
				self:Print("Missing flags: " .. tconcat(missingflags, ", "))
			end
			if (#extraflags > 0) then
				self:Print("Extra flags: " .. tconcat(extraflags, ", "))
			end
			if (not tank) and (not healer) and (not caster) and (not dps) then
				self:Print("No player type flag.")
			end
			if (not Cloth) or
				(not Leather) or
				(not Mail) or
				(not Plate) or
				(not Cloak) or
				(not Trinket) or
				(not Ring) or
				(not Necklace) or
				(not Shield ) or
				(not OneHanded) or
				(not TwoHanded) or
				(not Axe) or
				(not Sword) or
				(not Mace) or
				(not Polearm) or
				(not Dagger) or
				(not Staff) or
				(not Wand) or
				(not Thrown) or
				(not Bow) or
				(not Crossbow) or
				(not Ammo) or
				(not Fist) or
				(not Gun) then
					self:Print("Missing: item type flag")
			end
		end

	end
end
